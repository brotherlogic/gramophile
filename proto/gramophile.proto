
syntax = "proto3";

package gramophile;

import "github.com/brotherlogic/discogs/proto/discogs.proto";
import "config.proto";

option go_package = "github.com/brotherlogic/gramophile/proto";

enum NoncomplianceIssue {
    NEEDS_CLEAN = 0;
}

message RecordUpdate {
    int64 date = 1;

    Record before = 2;
    Record after = 3;
}

message Record {
   discogs.Release release = 1;

   int64 last_update_time = 2;

   string last_good_config_hash = 3;

   int64 last_clean_time = 4;
   int64 last_listen_time = 7;

   int32 num_plays = 5;

   repeated NoncomplianceIssue issues = 6;

   // Field is not stored directly
   repeated RecordUpdate updates = 8;
}

message Intent {
    int64 clean_time = 1;
    int64 listen_time = 2;
}

message Queues {
    repeated Queue queues = 1;
}

message Queue {
    string name = 1;
    repeated QueueElement elements = 2;
}

message QueueElement {
    int64 run_date = 1;
   
    string auth = 2;
   
    int32 backoff_in_seconds = 3;

    oneof entry {
        RefreshUserEntry refresh_user = 4;
        RefreshCollectionEntry refresh_collection = 5;
        RefreshIntents refresh_intents = 6;
    }
}

message RefreshUserEntry {
    string auth = 1;
}

message RefreshCollectionEntry {
    int32 page = 1;
}

message RefreshIntents {
    int64 instance_id = 1;
}

message EnqueueRequest{
    QueueElement element = 1;
}

message EnqueueResponse {}

message ListRequest {
}
message ListResponse {
    repeated QueueElement elements = 2;
}

service QueueService {
    rpc Enqueue(EnqueueRequest) returns (EnqueueResponse) {};
    rpc Execute(EnqueueRequest) returns (EnqueueResponse) {};
    rpc List(ListRequest) returns (ListResponse) {};
}

message StoredUser {
    GramophileAuth auth = 1;
    discogs.User user = 2;
    string user_token = 3;
    string user_secret = 4;

    int64 last_refresh_time = 5;
    int64 last_collection_refresh = 6;
    int64 last_config_update = 7;

    GramophileConfig config = 8;    
}

message GramophileAuth {
    string token = 1;
}

message UserLoginAttempts {
    repeated UserLoginAttempt attempts = 1;
}

message UserLoginAttempt {
    string RequestToken = 1;
    string Secret = 2;
    int64 DateAdded = 3;

    string user_token = 4;
    string user_secret = 5;
}

message GetURLRequest {}
message GetURLResponse {
    string URL = 1;
    string Token = 2;
}

message GetLoginRequest {
    string Token = 1;
}

message GetLoginResponse {
    GramophileAuth auth = 1;
}

message GetStateRequest {}
message GetStateResponse {
    int64 last_user_refresh = 1;
    int32 collection_size = 2;
    int64 last_collection_sync = 3;
    int64 last_config_update = 4;
    string config_hash = 5;
    int32 collection_misses = 6;
}

message SetConfigRequest {
    GramophileConfig config = 1;
}
message SetConfigResponse {}

message SetIntentRequest {
    int64 instance_id = 1;
    Intent intent = 2;
}

message SetIntentResponse {}

message GetRecordRequest {
    oneof request {
        GetRecordWithIssue get_record_with_issue = 1;
        GetRecordToListenTo get_record_to_listen_to = 2;
        GetRecordWithId get_record_with_id = 3;
    }

    bool include_history = 4;
}

message GetRecordWithId {
    int64 instance_id = 1;
    int64 release_id = 2;
}

message GetRecordWithIssue {}

message GetRecordToListenTo {
    string filter = 1;
}

message GetRecordResponse {
    Record record = 1;
    repeated Record records = 2;
}

// Externally accessible service
service GramophileEService {
    rpc GetURL(GetURLRequest) returns (GetURLResponse) {};
    rpc GetLogin(GetLoginRequest) returns (GetLoginResponse) {};
    rpc GetUser(GetUserRequest) returns (GetUserResponse) {};
    rpc GetState(GetStateRequest) returns (GetStateResponse) {};

    rpc SetConfig(SetConfigRequest) returns (SetConfigResponse) {};

    rpc SetIntent(SetIntentRequest) returns (SetIntentResponse) {};

    rpc GetRecord(GetRecordRequest) returns (GetRecordResponse) {};
}

message GetUserRequest {}
message GetUserResponse {
   StoredUser user = 1;
}

message GetUsersRequest {}
message GetUsersResponse {
    repeated StoredUser users = 1;
}

message DeleteUserRequest {
    string id = 1;
}
message DeleteUserResponse {}

message CleanRequest {}
message CleanResponse {}

// Internally accessible service
service GramophileService {
    rpc GetUsers(GetUsersRequest) returns (GetUsersResponse) {};
    rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {};
    rpc Clean(CleanRequest) returns (CleanResponse) {};
}