
syntax = "proto3";

package gramophile;

import "github.com/brotherlogic/discogs/proto/discogs.proto";
import "config.proto";
import "organisation.proto";

option go_package = "github.com/brotherlogic/gramophile/proto";

message DBChange {
    enum Type {
        CHANGE_UNKNOWN = 0;
        CHANGE_RECORD = 1;
        CHANGE_WANT = 2;
    }

    Type type = 1;
    Record old_record = 2;
    Record new_record = 3;
    int32 user_id = 4;
    Want old_want = 5;
    Want new_want = 6;
}

message PrintMove {
    int64 timestamp = 1;
    int64 iid = 2;
    Location origin = 3;
    Location destination = 4;
    string record = 5;
}

message Location {
    string location_name = 1;
    int32 slot = 4;
    string shelf = 5;
    repeated Context before = 2;
    repeated Context after = 3;
}

message Context {
    int32 index = 1;
    int64 iid = 2;
    string record = 3;
}

enum WantlistType {
    TYPE_UNKNOWN = 0;
    EN_MASSE = 1;
    ONE_BY_ONE = 2;
    DATE_BOUNDED = 3;
}

enum WantlistVisibility {
    VISIBLE = 0;
    INVISIBLE = 1;
}

message Wantlist {
    string name = 1;
    int64 start_date = 2;
    int64 end_date = 3;
    WantlistType type = 4;
    repeated WantlistEntry entries = 5;
    WantlistVisibility visibility = 6;

    WantFilter global_filter = 7;

    int64 last_purchase_date = 8;

    bool active = 9;

    int64 last_updated_timestamp = 10;
}

message WantlistEntry {
    int64 id = 1;
    string artist = 2;
    string title = 3;
    int32 index = 4;
    WantState state = 5;
    int64 date_enabled = 6;
    int64 master_id = 7;
    bool digital_only = 8;
    int32 score =9 ;
}

enum WantState {
    WANT_UNKNOWN = 0;
    PENDING = 1;
    RETIRED = 2;
    PURCHASED = 3;
    WANTED = 4;
    HIDDEN = 5;
    DELETED = 6;
    IN_TRANSIT = 7;
}

message WantFilter {
    repeated string formats = 1;
   repeated string exclude_formats = 2;
}

message Want {
    int64 id = 1;
    int64 want_added_date = 2;
    WantState state = 3;
    int64 sync_id = 4;

    int64 master_id = 5;
    WantFilter master_filter = 6;

    bool clean = 7;

    int32 score = 8;
}

enum NoncomplianceIssue {
    NEEDS_CLEAN = 0;
}

message RecordUpdate {
    int64 date = 1;

    Record before = 2;
    Record after = 3;

    string metadata = 5;

    repeated string explanation = 4;
}

message Update {
    int64 date = 1;
    repeated Change changes = 2;
}

message Change {
    enum ChangeType {
        ADDED = 0;
        REMOVED = 1;
        CHANGED = 2;
    }
    ChangeType type = 1;
    string description = 2;
}

enum KeepStatus {
    KEEP_UNKNOWN = 0;
    NO_KEEP = 1;
    DIGITAL_KEEP = 2;
    MINT_UP_KEEP = 3;
    KEEP = 4;
    RESET = 5;
}

message Record {
   discogs.Release release = 1;

   int64 last_update_time = 2;

   string last_good_config_hash = 3;

   int64 last_clean_time = 4;
   int64 last_listen_time = 7;

   float weight = 10;
   float width = 9;

   int32 num_plays = 5;

   repeated NoncomplianceIssue issues = 6;

   int64 refresh_id = 11;

   string goal_folder = 12;

   string sleeve = 13;

   int64 arrived = 14;

   float mint_sale_suggestion = 15;

   // If set then we have an associated sale id
   int64 sale_id = 16;

   KeepStatus keep_status = 17;

   discogs.Price median_price = 18;
   discogs.Price low_price = 21;

   int64 earliest_release_date = 19;
   int64 last_earliest_release_update = 20;
   int64 last_stat_refresh = 22;
   
   repeated int64 og_ids = 23;
   repeated int64 digital_ids = 24;

   repeated int64 mint_versions = 25;
}

message SaleInfo {
    int64 sale_id = 1;
    int64 last_price_update = 2;
    discogs.SaleStatus sale_state = 3;
    int64 refresh_id = 4;
    int64 release_id = 5;
    discogs.Price current_price = 6;
    string condition = 7;

    int64 listed_date = 8;
    discogs.Price initial_price = 9;
    discogs.Price median_price = 10;
    discogs.Price low_price = 13;

    repeated PriceUpdate updates = 11;

    int64 time_at_median = 12;
    int64 time_created = 14;
    int64 time_refreshed = 15;
}

message PriceUpdate {
    int64 date = 1;
    discogs.Price set_price = 2;
    string motivation = 3;
}



message Intent {
    int64 clean_time = 1;
    int64 listen_time = 2;
    float width = 3;
    float weight = 4;
    string goal_folder = 5;
    string sleeve = 6;
    int64 arrived = 7;
    KeepStatus keep = 8;
    int32 new_score = 9;
    int32 new_folder = 10;

    int64 intent_time = 11;
    repeated int64 mint_ids = 12;
}

message Queues {
    repeated Queue queues = 1;
}

message Queue {
    string name = 1;
    repeated QueueElement elements = 2;
}

message QueueElement {
    int64 run_date = 1;
   
    string auth = 2;
   
    int32 backoff_in_seconds = 3;

    oneof entry {
        RefreshUserEntry refresh_user = 4;
        RefreshCollectionEntry refresh_collection_entry = 5;
        RefreshIntents refresh_intents = 6;
        RefreshUpdates refresh_updates = 8;
        AddFolderUpdate add_folder_update = 9;
        RefreshSales refresh_sales = 10;
        LinkSales link_sales = 11;
        RefreshWantlists refresh_wantlists = 12;
        RefreshWants refresh_wants = 14;
        UpdateSale update_sale = 15;
        MoveRecords move_records = 16;
        MoveRecord move_record = 17;
        RefreshRelease refresh_release = 18;
        RefreshCollection refresh_collection = 19;
        RefreshEarliestReleaseDates refresh_earliest_release_dates = 20;
        RefreshEarliestReleaseDate refresh_earliest_release_date = 21;
        SyncWants sync_wants = 22;
        RefreshWant refresh_want = 23;
        AddMasterWant add_master_want = 24;
        UpdateMasterWant update_master_want = 25;
        RefreshState refresh_state = 26;
    }

    int64 refresh_id = 7;
    string intention = 27;
    bool force = 28;

    enum Priority {
        PRIORITY_UNKNOWN = 0;
        PRIORITY_LOW = 1;
        PRIORITY_HIGH = 2;
    }
    Priority priority = 29;

    int64 addition_date = 30;
}

message RefreshState {
    int64 iid = 1;
    bool force = 2;
}


message AddMasterWant {
    Want want = 1;
}

message UpdateMasterWant {
    Want want = 1;
    WantState new_state = 2;
    bool delete = 3;
}

message RefreshWant {
   Want want = 1;
   bool delete = 3;
}

message SyncWants {
    int32 page = 1;
    int64 refresh_id = 2;
    bool force = 3;
}

message RefreshEarliestReleaseDates {
    int64 iid = 1;
    int64 master_id = 2;
}

message RefreshEarliestReleaseDate {
    int64 iid = 1;
    int64 other_release = 2;
    bool update_digital_wantlist = 3;
}

message RefreshCollection {
    string intention = 1;
}

message RefreshRelease {
    int64 iid = 1;
    string intention = 2;
}

message UpdateSale {
    int64 sale_id = 1;
    int32 new_price = 2;
    int64 release_id = 3;
    string condition = 4;
    string motivation = 5;
}

message MoveRecord {
    int64 recordIid = 1;
    string move_folder = 2;
    string rule = 3;
}

message MoveRecords {}

message RefreshWants {}

message AddWant {
    int64 id = 1;
    int64 master_id = 2;
    WantFilter filter = 3;
}


message RefreshWantlists {

}

message LinkSales {
    int64 refresh_id = 1;
}

message RefreshSales {
    int32 page = 1;
    int64 refresh_id = 2;
}

message AddFolderUpdate {
    string folder_name = 1;
}

message RefreshUpdates {

}

message RefreshUserEntry {
    string auth = 1;
}

message RefreshCollectionEntry {
    int32 page = 1;
    int64 refresh_id = 2;
}


message CleanCollectionEntry {
    int64 refresh_id = 1;
}

message RefreshIntents {
    int64 instance_id = 1;
}

message EnqueueRequest{
    QueueElement element = 1;
}

message EnqueueResponse {}

message ListRequest {
}
message ListResponse {
    repeated QueueElement elements = 2;
}

message DrainRequest{}
message DrainResponse{
    int32 count = 1;
}

service QueueService {
    rpc Enqueue(EnqueueRequest) returns (EnqueueResponse) {};
    rpc Execute(EnqueueRequest) returns (EnqueueResponse) {};
    rpc List(ListRequest) returns (ListResponse) {};
    rpc Drain(DrainRequest) returns (DrainResponse) {};
}

message StoredUser {
    GramophileAuth auth = 1;
    discogs.User user = 2;
    string user_token = 3;
    string user_secret = 4;

    int64 last_refresh_time = 5;
    int64 last_collection_refresh = 6;
    int64 last_config_update = 7;
    int64 last_sale_refresh = 11;
    int64 last_want_refresh = 12;

    GramophileConfig config = 8;    

    repeated discogs.Folder folders = 9;
    repeated FolderMove moves = 10;
}

message GramophileAuth {
    string token = 1;
}

message UserLoginAttempts {
    repeated UserLoginAttempt attempts = 1;
}

message UserLoginAttempt {
    string RequestToken = 1;
    string Secret = 2;
    int64 DateAdded = 3;

    string user_token = 4;
    string user_secret = 5;
}

message GetURLRequest {}
message GetURLResponse {
    string URL = 1;
    string Token = 2;
}

message GetLoginRequest {
    string Token = 1;
}

message GetLoginResponse {
    GramophileAuth auth = 1;
}

message GetStateRequest {}
message GetStateResponse {
    int64 last_user_refresh = 1;
    int32 collection_size = 2;
    int64 last_collection_sync = 3;
    int64 last_config_update = 4;
    string config_hash = 5;
    int32 collection_misses = 6;
    int32 folder_count = 7;
    int64 last_sale_refresh = 8;
    int64 last_want_sync  = 9;
}

message SetConfigRequest {
    GramophileConfig config = 1;
}
message SetConfigResponse {}

message SetIntentRequest {
    int64 instance_id = 1;
    Intent intent = 2;
}

message SetIntentResponse {}

message GetRecordRequest {
    oneof request {
        GetRecordWithIssue get_record_with_issue = 1;
        GetRecordToListenTo get_record_to_listen_to = 2;
        GetRecordWithId get_record_with_id = 3;
        bool get_records_mint_up = 5;
    }

    bool include_history = 4;
}

message RecordResponse {
    Record record = 1;
    repeated RecordUpdate updates = 2;
    SaleInfo sale_info = 3;
}

message GetRecordWithId {
    int64 instance_id = 1;
    int64 release_id = 2;
}

message GetRecordWithIssue {}

message GetRecordToListenTo {
    string filter = 1;
}

message GetRecordResponse {
    repeated RecordResponse records = 1;
}

message GetOrgRequest {
    string org_name = 1;
    string name = 2;
    string hash = 3;
}

message GetOrgResponse {
    OrganisationSnapshot snapshot = 1;
}

message SetOrgSnapshotRequest {
    string org_name = 1;
    int64 date = 2;
    string name = 3;
}

message SetOrgSnapshotResponse {}

message AddWantlistRequest {
    string name = 1;
    WantlistType type = 2;
    WantlistVisibility visibility = 3;
}

message AddWantlistResponse {}

message RefreshRecordRequest {
    int64 instance_id = 1;
    bool just_state = 2;
}

message RefreshRecordResponse {}


// Externally accessible service
service GramophileEService {
    rpc GetURL(GetURLRequest) returns (GetURLResponse) {};
    rpc GetLogin(GetLoginRequest) returns (GetLoginResponse) {};
    rpc GetUser(GetUserRequest) returns (GetUserResponse) {};
    rpc GetState(GetStateRequest) returns (GetStateResponse) {};

    rpc SetConfig(SetConfigRequest) returns (SetConfigResponse) {};

    rpc SetIntent(SetIntentRequest) returns (SetIntentResponse) {};

    rpc GetRecord(GetRecordRequest) returns (GetRecordResponse) {};
    rpc RefreshRecord(RefreshRecordRequest) returns (RefreshRecordResponse) {};

    rpc GetOrg(GetOrgRequest) returns (GetOrgResponse) {};
    rpc SetOrgSnapshot(SetOrgSnapshotRequest) returns (SetOrgSnapshotResponse) {};

    rpc AddWant(AddWantRequest) returns (AddWantResponse) {};
    rpc GetWants(GetWantsRequest) returns (GetWantsResponse) {};
    rpc RefreshWant(RefreshWantRequest) returns (RefreshWantResponse) {};
  
    rpc AddWantlist(AddWantlistRequest) returns (AddWantlistResponse) {};
    rpc GetWantlist(GetWantlistRequest) returns (GetWantlistResponse) {};
    rpc UpdateWantlist(UpdateWantlistRequest) returns (UpdateWantlistResponse) {};
    rpc ListWantlists(ListWantlistsRequest) returns (ListWantlistsResponse) {};

    rpc GetSale(GetSaleRequest) returns (GetSaleResponse) {};
}

message GetSaleRequest {
    int64 id = 1;
    int64 min_median = 2;
}

message GetSaleResponse {
    repeated SaleInfo sales = 1;
}

message ListWantlistsRequest {}
message ListWantlistsResponse {
    repeated Wantlist lists = 1;
}

message UpdateWantlistRequest {
    string name = 1;
    int64 add_id = 2;
    int64 delete_id = 3;
    WantlistType new_type = 4;
}

message UpdateWantlistResponse {}

message GetWantsRequest{
    bool include_updates = 2;
    int64 release_id = 3;
}
message GetWantsResponse{
    repeated WantResponse wants = 1;
}

message WantResponse {
    Want want = 1;
    repeated Update updates = 2;
}

message RefreshWantRequest {
    int64 want_id = 1;
}
message RefreshWantResponse {}

message AddWantRequest {
    int64 want_id = 1;
    int64 master_want_id = 2;
    WantFilter filter = 3;
}

message AddWantResponse {}

message GetWantlistRequest{
    string name = 1;
}
message GetWantlistResponse {
    Wantlist list = 1;
}

message GetUserRequest {}
message GetUserResponse {
   StoredUser user = 1;
}

message GetUsersRequest {}
message GetUsersResponse {
    repeated StoredUser users = 1;
}

message DeleteUserRequest {
    string id = 1;
}
message DeleteUserResponse {}

message CleanRequest {}
message CleanResponse {}

// Internally accessible service
service GramophileService {
    rpc GetUsers(GetUsersRequest) returns (GetUsersResponse) {};
    rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {};
    rpc Clean(CleanRequest) returns (CleanResponse) {};
}