syntax = "proto3";

package gramophile;

option go_package = "github.com/brotherlogic/gramophile/proto";

import "classification.proto";
import "moving.proto";
import "organisation.proto";
import "github.com/brotherlogic/discogs/proto/discogs.proto";

message Filter {
    repeated string formats = 1;
    repeated int32 exclude_folder = 2;
    repeated int32 include_folder = 3;
}

enum Basis {
    DISCOGS = 0;
    GRAMOPHILE = 1;
}

enum Mandate {
    NONE = 0;
    RECOMMENDED = 1;
    REQUIRED = 2;
}

enum Bool {
    UNKNOWN = 0;
    TRUE = 1;
    FALSE = 2;
}

message MoveCriteria {
    Bool has_sale_id = 1;
    discogs.SaleStatus sale_status = 2;
    Bool listened = 3; 
    Bool arrived = 4;
}

enum MoveState {
    ENABLED = 0;
    BLOCKED_BECAUSE_OF_LOOP = 1;
}

message ValidationCriteria {
    Bool is_cleaned = 1;
}

enum ValidationStrategy {
    VALIDATE_IN_PLACE = 0;
    LISTEN_TO_VALIDATE = 1;
    MOVE_TO_VALIDATE = 2;
}

message ValidationRule {
    // These are the records that will be validated
    Filter validation_filter = 1;
    ValidationCriteria validation_criteria = 2;
    ValidationStrategy validation_strategy = 3;
}

message FolderMove {
    string name = 1;
    MoveCriteria criteria = 2;
    string move_folder = 3;
    bool move_to_goal_folder = 4;
    Create origin = 5;
    MoveState move_state = 6;
}

message MoveQuota {
    repeated MoveHistory past_moves = 1;
}

message MoveHistory {
    string move = 1;
    int64 iid = 2;
    int64 time = 3;
}

enum MoveSource {
    USER_PROVIDED = 0;
    GRAM_PROVIDED = 1;
}

message Sleeve {
    string name = 1;
    float width_multiplier = 2;
}

message SleeveConfig {
    Mandate mandate = 1;
    repeated Sleeve allowed_sleeves = 2;
}

message CleaningConfig {
    Mandate cleaning = 1;
    Filter applies_to = 2;

    int64 cleaning_gap_in_seconds = 3;
    int32 cleaning_gap_in_plays = 4;
}

message ListenConfig {
    Mandate mandate = 1;
    repeated ListenFilter filters = 2;
}

message Order {
    enum Ordering {
      ORDER_RANDOM = 0;
      ORDER_ADDED_DATE = 1;
    }

    Ordering ordering = 1;
    bool reverse = 2;
}

message ListenFilter {
    string name = 1;
    Filter filter = 2;
    
    Order order = 3;
}

message UserConfig {
    enum UserLevel {
        USER_LEVEL_STANDARD = 0;
        USER_LEVEL_BETA = 1;
        USER_LEVEL_OMNIPOTENT = 2;
    }

    // User level sets what features are available to the user
    // STANDARD - Standard user
    // BETA - Beta user - early access to some features
    //        but comes with some risk
    // OMNIPOTENT - Classified
    UserLevel user_level = 1;
}

message GramophileConfig {
    Basis basis = 2;
    CleaningConfig cleaning_config = 1;
    ListenConfig listen_config = 3;
    WidthConfig width_config = 4;
    OrganisationConfig organisation_config = 5;
    WeightConfig weight_config = 6;
    GoalFolderConfig goal_folder_config = 7;
    SleeveConfig sleeve_config = 8;
    ArrivedConfig arrived_config = 9;
    SaleConfig sale_config = 10;
    KeepConfig keep_config = 11;
    WantsConfig wants_config = 16;
    PrintMoveConfig print_move_config = 17;
    MintUpConfig mint_up_config = 18;
    WantslistConfig wants_list_config = 19;
    ScoreConfig score_config = 20;
    ClassificationConfig classification_config = 21;
    MovingConfig moving_config = 22;
    UserConfig user_config = 23;
    AddConfig add_config = 24;

    Create create_folders = 12;
    Create create_moves = 13;

    repeated FolderMove moves = 14;
    repeated ValidationRule validations = 15;
}

enum Enabled {
    ENABLED_DISABLED = 0;
    ENABLED_ENABLED = 1;
}


message AddConfig {
    string default_folder = 1;
    Mandate allow_adds = 2;
    Mandate allow_delete = 3;
}

message ScoreConfig {
    int32 bottom_range = 1;
    int32 top_range = 2;
}

message MintUpConfig {
    // 0 here means no mint ups are sent
    int32 period_in_seconds = 1;
    string print_target = 2;
    int64 last_mint_up_delivery = 3;
}

message PrintMoveConfig {
    Mandate mandate = 1;
    int32 context = 2;
    string print_target = 3;
}

message WeightConfig {
    Mandate mandate = 1;
}

message WidthConfig {
    Mandate mandate = 1;
}

enum Create {
    MANUAL = 0;
    AUTOMATIC = 1;
}

message GoalFolderConfig {
    Mandate mandate = 1;
}

message ArrivedConfig {
    Mandate mandate = 1;
}

enum SaleUpdateType {
    SALE_UPDATE_UNKNOWN  = 0;
    NO_SALE_UPDATE = 5;
    MINIMAL_REDUCE = 1;

    // Reduce to the Median over the course of 1 month, then hold at median price
    REDUCE_TO_MEDIAN = 2;
    REDUCE_TO_MEDIAN_AND_THEN_LOW = 3;
    REDUCE_TO_MEDIAN_AND_THEN_LOW_AND_THEN_STALE = 4;
}

// Setting this mandate will enable gramophile to support sale tracking / adjustment
message SaleConfig {
    Mandate mandate = 1;

    Mandate handle_price_updates = 2;
    int64 update_frequency_seconds = 3;
    SaleUpdateType update_type = 4;

    int32 reduction = 5;

    // Supports reduce to median post changes
    int64 post_median_time = 6;
    int32 post_median_reduction = 7;
    int64 post_median_reduction_frequency = 8;
    LowerBoundStrategy lower_bound_strategy = 9;
    int32 lower_bound = 10;

    // Supports reduce to stale level post reaching low
    int64 post_low_time = 14;
    int32 post_low_reduction = 15;
    int32 post_low_reduction_frequency_seconds = 16;
    int32 stale_bound = 17;

    // Time based sales
    int32 time_to_median_days = 11;
    int32 time_to_lower_days = 12;
    int32 time_to_stale_days = 13;

    // Config for adding sales
    Enabled add_sale_enabled = 18;    
    float listing_price_buffer = 19;
    enum ListingStrategy {
        LISTING_STRATEGY_SPECIFY = 0;
        LISTING_STRATEGY_HIGH = 1;
        LISTING_STRATEGY_MEDIAN = 2;
        LISTING_STRATEGY_RECOMMENDED_MINT = 3;
        LISTING_STRATEGY_RECOMMENDED_VGPLUS = 4;
        LISTING_STRATEGY_RECOMMENDED_MINT_OR_HIGH = 5;
    }
    ListingStrategy listing_strategy = 20;
    bool allow_offers = 21;
}
    

enum LowerBoundStrategy {
    DISCOGS_LOW = 0;
    STATIC_LOW = 1;
}

message KeepConfig {
    Mandate mandate = 1;
}

enum WantsBasis {
    WANTS_DISCOGS = 0;
    WANTS_HYBRID = 1;
    WANTS_GRAMOPHILE = 2;
}

enum WantsExisting {
    EXISTING_UNKNOWN = 0;
    EXISTING_DROP = 1;
    EXISTING_LIST = 2;
}

enum DigitalWants {
    DIGITAL_WANTS_UNKNOWN = 0;
    DIGITAL_WANTS_MANUAL = 1;
    DIGITAL_WANTS_GRAMOPHILE = 2;
}

message WantsConfig {
    WantsBasis origin = 1;
    WantsExisting existing = 2;
    string transfer_list = 3;

    DigitalWants digital_wants = 4;

    int32 max_active_want_lists = 5;

    bool mint_up_want_list = 7;
    bool digital_want_list = 8;
}

message WantslistConfig {
    float min_score = 1;
    int32 min_count = 2;

    int32 listening_threshold = 3;

    repeated StoredWantlist wantlists = 4;
}

enum WantlistType {
    TYPE_UNKNOWN = 0;
    EN_MASSE = 1;
    ONE_BY_ONE = 2;
    DATE_BOUNDED = 3;
}

enum WantlistVisibility {
    VISIBLE = 0;
    INVISIBLE = 1;
}


message StoredWantlist {
    string name = 1;
    int64 start_date = 2;
    int64 end_date = 3;
    WantlistType type = 4;
    repeated StoredWantlistEntry entries = 5;
    WantlistVisibility visibility = 6;
}

message StoredWantlistEntry {
    int64 id = 1;
    int64 master_id = 2;
    int32 index = 3;
}
